version: '3.8'

services:
  api:
    container_name: nestjs_auth_api
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=nestjs_auth
      - DB_TEST_NAME=nestjs_auth_test
      - DB_TEST_USER=postgres_test
      - DB_TEST_PASSWORD=postgres_test
      - JWT_SECRET=your_jwt_secret_key
      - JWT_REFRESH_SECRET=your_jwt_refresh_secret_key
      - PASSWORD_RESET_SECRET=your_password_reset_secret_key
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - postgres
    networks:
      - nestjs_network
    command: npm run start:dev

  postgres:
    container_name: nestjs_auth_db
    image: postgres:15-alpine
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=nestjs_auth
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/schemas/01-init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./src/schemas/02-test-data.sql:/docker-entrypoint-initdb.d/02-test-data.sql
      - ./src/schemas/test/setup-test-db.sql:/docker-entrypoint-initdb.d/03-setup-test-db.sql
    networks:
      - nestjs_network
    command: [
      "postgres",
      "-c", "log_statement=all",
      "-c", "log_destination=stderr"
    ]

networks:
  nestjs_network:
    driver: bridge

volumes:
  postgres_data: